# Behaviour of binary and unary operators on Value and Datum

* **scalar** refers to a Value or NUMBER Datum with a single numeric value
* **vector** refers to a Value or NUMBER Datum with a 1D vector

## Datum within *expr* node

### Binary operators

|operator and types|behaviour|
|--------------|------|
|+|pixelwise addition|
|-|pixelwise subtraction|
|*|pixelwise multiplication|
|/|pixelwise division|
|^|pixelwise exponentiation|
|&|maximum of two values (essentially a fuzzy AND operator)|
|\||minimum of two values (essentially a fuzzy OR operator)|

### Behaviour for different types of operands

* **Scalar and Image**, **Image and Scalar**: the scalar is applied to every pixel in the image, so if `a` is an image,
then `a*2` multiplies every the value of every pixel in every band by 2, and `1/a`
reciprocates every pixel.

* **Vector and Image**, **Image and Vector**: The vector must have the same number of elements as there are bands
in the image. The corresponding element in the vector is applied to each band in the image, so if `a` is
a 3-band image, then `a*vec(1,2,3)` will multiply the pixel values in the channels by 1, 2 and 3 respectively.

* **Vector and Scalar, Scalar and Vector**: the scalar is applied to each element in the vector: `2*vec(1,2) = [2,4]`

* **Vector and Vector:** The operator is applied to the vectors element-wise: `vec(1,2) + vec(3,4) = [4,6]`

* **Scalar and Scalar:** does exactly what you think it does.

### More unusual binary operators

* **$ : band extraction -** - LHS must be image, RHS must be a wavelength or identifier or a vector of wavelengths: `a$R`, `a$640`, `a$vec(640,550,440)` will all work. You can also do `a$_0` to extract band
by index, but this won't work with vectors (reason - we could allow `a$5` to extract band 5, but what if we end up being able to process hyperspectral imagery where `a$440` could be either a wavelength
or a band?)
