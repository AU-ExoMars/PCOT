Todo:

1) Refactor image -> cube

2) Remove cube(image) types, and split, merge, grey nodes.
    add new node: recombine. Takes up to 3 cubes, produces a single
    cube assembled from channels of the 3. 
    Don't need a "split", can be done with multiple recombines if required.
    
    Display canvas orders by wavelength (longest first) so R,G,B
    is displayed correctly. Sources whose wavelength isn't known
    are put at the end, in numerical order.
    If there are not enough channels, the last channel is duplicated
    (so a 2-channel RB image is shown as RBB).
    Recombine also acts as a general purpose viewing node.
    
3) parameterisation:
    yeah, just turn parameters into inputs.
    Allow numeric type (int/float)
    Int input accepts int
    Float input accepts float or int
    Create node to produce those types.
    

4) add expression evaluator. Takes multiple expressions, one for
    each output channel, and up to 4 input cubes (a,b,c,d)
    Also 4 numeric parameters (p,q,r,s) set by float inputs
    
    Each expression is for a single channel, so channels are in
    the form a0, a1, a2...
    OR a[filtername/position]
    OR a[filterfreq]
    If a channel doesn't exist or is out of range, then an error
    and the whole expression fails.
    
5) Macro library facility:
    allow macros to be imported from another file with a UI
        (open dialog -> import macro dialog)
        must load any macros used by that macro
    allow macros to be saved into another file
        (save dialog -> merge if file exists? -> may load existing file
        -> if macro exists, replace?)
        must save any macro used by that macro
        
6) Macro "split" (i.e. turn instance into new prototype with new name)

7) Store data in file for input nodes (tricky, will probably require
a hefty mod to the data format)
