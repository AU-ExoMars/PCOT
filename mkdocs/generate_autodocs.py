#!/usr/bin/env python

"""
This script generates autodoc markdown files into the 
docs/autodocs directory. It needs to have the PCOT
conda environment active, as it uses PCOT as a library,
generating documentation for nodes and functions from 
their doc strings.
"""

import pcot
from pcot.parameters.autodoc import generate_inputs_documentation, generate_outputs_documentation
import os
import shutil
from datetime import datetime

postscript = f"""

----

Automatically generated by generate_autodocs.py

Date: {datetime.now().isoformat()}

"""


template = """


# Autodocs

Below are automatically generated documents for certain entities
in PCOT. The text in them is extracted from the Python source code,
usually from "docstring" comments to classes or functions.

They are generated by running the *generate_autodocs.py*
script in the mkdocs directory.

## Nodes
Nodes are the entities which make up a PCOT document's graph, taking
inputs from various sources and manipulating them in various ways.

{nodes}

## *Expr* functions

Below are functions which can be used in the expression evaluation
node, [expr](expr).

{funcs}

## *Expr* properties

Below are properties which can be used in the expression evaluation
node, [expr](autodocs/expr).
Properties are names which can be used as identifiers on the
right hand side of a "." operator, such as *a.w* to get the width of an
image *a*.

{props}

## Input and output parameters for the parameter file (batch) runner

Below are links to pages describing parameters for setting the inputs and outputs
in batch files. See [batch mode](/userguide/batch) for more details.

* [Input parameters](batchinputs)
* [Output parameters](batchoutputs)

"""

inputprefix ="""

# Input parameters
Below is the full description for all the parameters controlling inputs
that can be modified from a batch file. There are four duplicate
entries, one for each input, so it's rather long. 

Each input has an entry for each input method, and which input method
is active is controlled by which parameters are set:

* If you want to use RGB, make sure to set at least `.rgb.filename`
* If you want to use ENVI, make sure to set at least `.envi.filename`
* If you want to use PARC, make sure to set at least `.parc.filename`
* If you want to use multifile, make sure to set at least at least
`.multifile.directory` and add at least one file by adding to
`.multifile.files`
* If you want to use PDS4, make sure to set at least at least
`.pds4.directory` and add at least one file by adding to
`.pds4.files`

## Example

```txt
# input 0 is an RGB file called foo.png

inputs.0.rgb.filename = foo.png

# input 1 is a multifile - the images are in ../test_data/images
# and they 

inputs.1.multifile.directory = ../test_data/images

# all .bin files called foo0..foo9 are to be added
.filenames.+ = foo[0-9].bin

# and all .bins called bar0..bar9
.+ = bar[0-9].bin



```

## Parameter table


"""

outputprefix = """

# Output parameters

Below is the full description for all the parameters controlling an output
in batch processing. You need to add at least one output and set its
parameters.

## Example

```txt
outputs.+.node = sink       # create a new output, have it use the node called 'sink'
.file = foo.pdf             # it will write to foo.pdf
.clobber = y                # existing foo.pdf will be overwritten
.annotations = y            # annotations will be output

.outputs.+.node = expr      # new output, using the 'expr' node
.file = foo.txt             # output to foo.txt
.prefix = Result of expr :  # some text to prefix with
.clobber = y                # existing file overwritten
```

## Parameter table

"""

pcot.setup()

parser = pcot.xform.allTypes['expr'].parser


if os.path.exists('docs/autodocs'):
    shutil.rmtree('docs/autodocs')

os.makedirs('docs/autodocs')

def genNodes():
    out = ""
    for realname, x in sorted(pcot.xform.allTypes.items()):
        name=realname.replace(' ', '_')
        out += f"* [{realname}]({name})\n"
        print(name)
        with open(f"docs/autodocs/{name}.md","w") as f:
            s = pcot.ui.help.getHelpMarkdown(x)
            f.write(s)
            f.write(postscript)
    return out
    
with open("docs/autodocs/batchinputs.md","w") as f:
    f.write(inputprefix)
    s=generate_inputs_documentation()
    f.write(s)
    f.write(postscript)

with open("docs/autodocs/batchoutputs.md","w") as f:
    f.write(outputprefix)
    s=generate_outputs_documentation()
    f.write(s)
    f.write(postscript)
            
with open("docs/autodocs/index.md","w") as idxfile:
    str = template.format(nodes=genNodes(),
        funcs=parser.listFuncs(),
        props=parser.listProps())
    idxfile.write(str)
    idxfile.write(postscript)
    

